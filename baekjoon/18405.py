{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNgfU/xDxj079LFZj/lYVr9"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"gsSwX_uGprYO"},"outputs":[],"source":["# 18405\n","\n","from collections import deque\n","import copy\n","\n","dx = [-1,1,0,0]\n","dy = [0,0,-1,1]\n","\n","def solution(n,k,graph,time,test_loc):\n","  viruses = []\n","  for i in range(n):\n","    for j in range(n):\n","      if graph[i][j]>0:\n","        viruses.append((graph[i][j],i,j))\n","  viruses.sort()\n","\n","  queue = deque()\n","  for i,x,y in viruses:\n","    queue.append((0,i,x,y))\n","\n","  temp = copy.deepcopy(graph)\n","\n","  while queue:\n","    t,i,x,y = queue.popleft()\n","    if t>=time:\n","      break\n","    for d in range(4):\n","      nx = x + dx[d]\n","      ny = y + dy[d]\n","      if nx>=0 and nx<n and ny>=0 and ny<n:\n","        if temp[nx][ny]==0:\n","          temp[nx][ny] = i\n","          queue.append((t+1,i,nx,ny))\n","\n","  return temp[test_loc[0]][test_loc[1]]\n","\n","n,k = map(int,input().split())\n","graph = []\n","for _ in range(n):\n","  graph.append(list(map(int,input().split())))\n","t,x,y = map(int,input().split())\n","\n","print(solution(n,k,graph,t,(x-1,y-1)))"]}]}