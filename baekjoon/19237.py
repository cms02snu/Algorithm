{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOaah+odnLAFJc6gaP2E+lX"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"3QHdD9d8qC8k"},"outputs":[],"source":["# 19237\n","\n","from collections import deque\n","import copy\n","\n","dx = [-1,1,0,0]\n","dy = [0,0,-1,1]\n","\n","def shark_move(i,x,y,d):\n","  for dir in next_dir[i][d]:\n","    nx = x + dx[dir]\n","    ny = y + dy[dir]\n","    if nx>=0 and nx<n and ny>=0 and ny<n:\n","      if smell[nx][ny]==-1:\n","        return nx,ny,dir\n","\n","  for dir in next_dir[i][d]:\n","    nx = x + dx[dir]\n","    ny = y + dy[dir]\n","    if nx>=0 and nx<n and ny>=0 and ny<n:\n","      if smell[nx][ny][0]==i:\n","        return nx,ny,dir\n","\n","def solution(n,m,k,graph,dir,next_dir):\n","  global smell\n","\n","  shark_loc = [-1] * m\n","  temp = [[[] for _ in range(n)] for _ in range(n)]\n","  for i in range(n):\n","    for j in range(n):\n","      if graph[i][j]>0:\n","        shark_loc[graph[i][j]-1] = (i,j)\n","        temp[i][j].append(graph[i][j]-1)\n","\n","  smell = [[-1]*n for _ in range(n)]\n","  for i,(x,y) in enumerate(shark_loc):\n","    smell[x][y] = [i,k]\n","\n","  curr_dir = copy.copy(dir)\n","\n","  time = 0\n","\n","  while time<1000:\n","    # 시간 증가\n","    time += 1\n","\n","    # 상어 이동\n","    for i,a in enumerate(shark_loc):\n","      if a!=-1:\n","        x,y = a\n","        nx,ny,nd = shark_move(i,x,y,curr_dir[i])\n","        temp[nx][ny].append(i)\n","        temp[x][y].remove(i)\n","        shark_loc[i] = (nx,ny)\n","        curr_dir[i] = nd\n","\n","    # 겹치면 경쟁\n","    for i in range(n):\n","      for j in range(n):\n","        if len(temp[i][j])>1:\n","          strong = min(temp[i][j])\n","          out = [a for a in temp[i][j] if a!=strong]\n","          temp[i][j] = [strong]\n","          for a in out:\n","            shark_loc[a] = -1\n","            curr_dir[a] = -1\n","\n","    # 1번 상어만 남았다면 종료\n","    if shark_loc[1:]==[-1]*(m-1):\n","      return time\n","\n","    # 냄새 시간 감소\n","    for i in range(n):\n","      for j in range(n):\n","        if smell[i][j]!=-1:\n","          smell[i][j][1] -= 1\n","          if smell[i][j][1]==0:\n","            smell[i][j] = -1\n","\n","    # 이동한 자리에 냄새 뿌리기\n","    for i,a in enumerate(shark_loc):\n","      if a!=-1:\n","        x,y = a\n","        smell[x][y] = [i,k]\n","\n","  return -1\n","\n","n,m,k = map(int,input().split())\n","graph = []\n","for _ in range(n):\n","  graph.append(list(map(int,input().split())))\n","dir = list(map(int,input().split()))\n","dir = [d-1 for d in dir]\n","next_dir = []\n","for _ in range(m):\n","  temp = []\n","  for _ in range(4):\n","    a = list(map(int,input().split()))\n","    a = [d-1 for d in a]\n","    temp.append(a)\n","  next_dir.append(temp)\n","\n","print(solution(n,m,k,graph,dir,next_dir))"]}]}